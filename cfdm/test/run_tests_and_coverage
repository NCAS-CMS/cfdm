#!/bin/bash

# --------------------------------------------------------------------
# Run the full test suite and produce a coverage report.
#
# $ run_test_and_coverage
#
# Or to omit the generation of an html report:
#
# $ run_test_and_coverage --nohtml
# --------------------------------------------------------------------
#set -x

library=cfdm

# Parse options. Note that xml is required for codecov:
if [[ $1 == "--noxml" ]] ; then 
    generate_xml="false"
else
    generate_xml="true"
fi
if [[ $1 == "--nohtml" ]] ; then 
    generate_html="false"
else
    generate_html="true"
fi

if ! command -v coverage &> /dev/null
then
    echo "Requires the coverage module: install it e.g. via 'pip install coverage'"
    exit 3
fi

coverage erase
coverage run --source=.. --omit="*/test/*" run_tests.py
# Capture exit status from unit tests
rc=$?

coverage report

cov_dir=${library}_coverage_reports
mkdir -p $cov_dir
echo "coverage docs: https://coverage.readthedocs.io"
if [[ $generate_html == "true" ]] ; then
    html_dir=$cov_dir/html
    mkdir -p $html_dir
    coverage html --title "$library test suite coverage report" -d $html_dir

    echo "coverage HTML report URL: file://$PWD/$html_dir/index.html"
fi
if [[ $generate_xml == "true" ]] ; then
    coverage xml
    mv "coverage.xml" $cov_dir/"coverage.xml"

    echo "coverage XML report URL: file://$PWD/$cov_dir/coverage.xml"
fi

# Return exit status from unit tests
exit $rc

#set +x
